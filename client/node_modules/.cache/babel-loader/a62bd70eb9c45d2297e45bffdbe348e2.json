{"ast":null,"code":"var _jsxFileName = \"/home/butterfly/Desktop/webdev/school/client/src/components/student/billing/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n        receipt_email: email\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      type: \"text\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Enter email address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"LhWChBKfkari0zZNBtJ4IuzMdKY=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CheckoutForm","stripe","elements","email","setEmail","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","receipt_email","type","target","value"],"sources":["/home/butterfly/Desktop/webdev/school/client/src/components/student/billing/CheckoutForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n        receipt_email: email,\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <input\n        id=\"email\"\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Enter email address\"\n      />\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}